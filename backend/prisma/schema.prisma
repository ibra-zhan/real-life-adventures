// Real Life Adventures MVP Database Schema
// Simplified schema focusing on core features: AI quests, profiles, and basic functionality

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum QuestDifficulty {
  EASY
  MEDIUM
  HARD
  EPIC
}

enum QuestStatus {
  DRAFT
  AVAILABLE
  COMPLETED
  ARCHIVED
}

enum UserQuestStatus {
  NOT_STARTED
  IN_PROGRESS
  SUBMITTED
  COMPLETED
  ABANDONED
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SubmissionType {
  PHOTO
  VIDEO
  TEXT
  CHECKLIST
}

// User Management (Simplified)
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  username          String    @unique
  passwordHash      String
  avatar            String?
  firstName         String?
  lastName          String?
  bio               String?
  
  // Account Status
  role              UserRole  @default(USER)
  isActive          Boolean   @default(true)
  emailVerified     Boolean   @default(false)
  emailVerificationToken String?
  passwordResetToken String?
  passwordResetExpires DateTime?

  // Gamification
  totalXP           Int       @default(0)
  currentLevel      Int       @default(1)
  questsCompleted   Int       @default(0)
  currentStreak     Int       @default(0)
  longestStreak     Int       @default(0)
  lastActivityDate  DateTime?
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastActiveAt      DateTime  @default(now())
  
  // Relationships
  preferences       UserPreferences?
  sessions          UserSession[]
  questsCreated     Quest[]
  submissions       Submission[]
  notifications     Notification[]
  questProgress     UserQuestProgress[]
  
  @@map("users")
}

model UserPreferences {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic Preferences
  emailNotifications      Boolean @default(true)
  pushNotifications       Boolean @default(true)
  profileVisibility       String  @default("public") // public, private
  
  // Quest Preferences
  preferredCategories     Json     // JSON array of category names
  preferredDifficulty     Json     // JSON array of preferred difficulties
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("user_preferences")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshToken String   @unique
  deviceInfo   String?
  ipAddress    String?
  userAgent    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  @@map("user_sessions")
}

// Quest System (Simplified)
model QuestCategory {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  icon        String?
  color       String?
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
  
  quests      Quest[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("quest_categories")
}

model Quest {
  id                String          @id @default(cuid())
  title             String
  description       String
  shortDescription  String
  instructions      String?
  
  // Classification
  categoryId        String
  category          QuestCategory   @relation(fields: [categoryId], references: [id])
  difficulty        QuestDifficulty
  tags              Json            // JSON array of tags
  
  // Requirements
  requirements      Json            // JSON array of requirement strings
  estimatedTime     Int             // minutes
  submissionTypes   Json            // JSON array of submission types
  
  // Status & Metadata
  status            QuestStatus     @default(DRAFT)
  isFeatured        Boolean         @default(false)
  
  // Location Requirements
  locationRequired  Boolean         @default(false)
  locationType      String?         // indoor, outdoor, specific
  specificLocation  String?         // JSON object with location data
  
  // Social Settings
  allowSharing      Boolean         @default(true)
  
  // Media
  imageUrl          String?
  
  // Creation
  createdBy         String?         // User ID if user-generated
  creator           User?           @relation(fields: [createdBy], references: [id])
  
  // Stats
  completionCount   Int             @default(0)
  averageRating     Float?
  ratingCount       Int             @default(0)
  
  // Timestamps
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  publishedAt       DateTime?
  
  // Relationships
  submissions       Submission[]
  userProgress      UserQuestProgress[]

  // Reward System
  pointsReward      Int             @default(50)  // XP points for completion

  @@map("quests")
}

// User Quest Progress Tracking
model UserQuestProgress {
  id              String          @id @default(cuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  questId         String
  quest           Quest           @relation(fields: [questId], references: [id], onDelete: Cascade)

  status          UserQuestStatus @default(NOT_STARTED)
  startedAt       DateTime?
  completedAt     DateTime?
  submittedAt     DateTime?
  abandonedAt     DateTime?

  // Progress tracking
  currentStep     Int             @default(0)
  totalSteps      Int             @default(1)
  progressData    Json?           // Custom progress data

  // Reward tracking
  xpEarned        Int             @default(0)
  bonusXP         Int             @default(0)

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([userId, questId])
  @@map("user_quest_progress")
}

// Submission System (Simplified)
model Submission {
  id              String           @id @default(cuid())
  questId         String
  quest           Quest            @relation(fields: [questId], references: [id])
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  
  type            SubmissionType
  status          SubmissionStatus @default(PENDING)
  
  // Content
  caption         String
  textContent     String?
  mediaUrls       Json?            // JSON array of media URLs
  checklistData   Json?            // JSON object for checklist submissions
  
  // Location (optional)
  latitude        Float?
  longitude       Float?
  address         String?
  
  // Privacy
  privacy         String           @default("public") // public, private
  
  // Moderation
  approvedBy      String?
  approvedAt      DateTime?
  rejectionReason String?
  
  // Timestamps
  submittedAt     DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@map("submissions")
}

// Notification System (Simplified)
model Notification {
  id          String           @id @default(cuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type        String           // quest_available, submission_approved, etc.
  title       String
  message     String
  actionUrl   String?
  metadata    Json?            // JSON object for additional data
  
  read        Boolean          @default(false)
  readAt      DateTime?
  
  createdAt   DateTime         @default(now())
  expiresAt   DateTime?
  
  @@map("notifications")
}